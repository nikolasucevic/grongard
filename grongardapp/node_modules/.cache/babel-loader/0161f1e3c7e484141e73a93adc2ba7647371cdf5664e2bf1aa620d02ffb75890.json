{"ast":null,"code":"\"use client\";\n\n// packages/react/slider/src/Slider.tsx\nimport * as React from \"react\";\nimport { clamp } from \"@radix-ui/number\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar PAGE_KEYS = [\"PageUp\", \"PageDown\"];\nvar ARROW_KEYS = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nvar BACK_KEYS = {\n  \"from-left\": [\"Home\", \"PageDown\", \"ArrowDown\", \"ArrowLeft\"],\n  \"from-right\": [\"Home\", \"PageDown\", \"ArrowDown\", \"ArrowRight\"],\n  \"from-bottom\": [\"Home\", \"PageDown\", \"ArrowDown\", \"ArrowLeft\"],\n  \"from-top\": [\"Home\", \"PageDown\", \"ArrowUp\", \"ArrowLeft\"]\n};\nvar SLIDER_NAME = \"Slider\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(SLIDER_NAME);\nvar [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME, [createCollectionScope]);\nvar [SliderProvider, useSliderContext] = createSliderContext(SLIDER_NAME);\nvar Slider = React.forwardRef((props, forwardedRef) => {\n  const {\n    name,\n    min = 0,\n    max = 100,\n    step = 1,\n    orientation = \"horizontal\",\n    disabled = false,\n    minStepsBetweenThumbs = 0,\n    defaultValue = [min],\n    value,\n    onValueChange = () => {},\n    onValueCommit = () => {},\n    inverted = false,\n    ...sliderProps\n  } = props;\n  const thumbRefs = React.useRef( /* @__PURE__ */new Set());\n  const valueIndexToChangeRef = React.useRef(0);\n  const isHorizontal = orientation === \"horizontal\";\n  const SliderOrientation = isHorizontal ? SliderHorizontal : SliderVertical;\n  const [values = [], setValues] = useControllableState({\n    prop: value,\n    defaultProp: defaultValue,\n    onChange: value2 => {\n      const thumbs = [...thumbRefs.current];\n      thumbs[valueIndexToChangeRef.current]?.focus();\n      onValueChange(value2);\n    }\n  });\n  const valuesBeforeSlideStartRef = React.useRef(values);\n  function handleSlideStart(value2) {\n    const closestIndex = getClosestValueIndex(values, value2);\n    updateValues(value2, closestIndex);\n  }\n  function handleSlideMove(value2) {\n    updateValues(value2, valueIndexToChangeRef.current);\n  }\n  function handleSlideEnd() {\n    const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];\n    const nextValue = values[valueIndexToChangeRef.current];\n    const hasChanged = nextValue !== prevValue;\n    if (hasChanged) onValueCommit(values);\n  }\n  function updateValues(value2, atIndex, {\n    commit\n  } = {\n    commit: false\n  }) {\n    const decimalCount = getDecimalCount(step);\n    const snapToStep = roundValue(Math.round((value2 - min) / step) * step + min, decimalCount);\n    const nextValue = clamp(snapToStep, [min, max]);\n    setValues((prevValues = []) => {\n      const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);\n      if (hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {\n        valueIndexToChangeRef.current = nextValues.indexOf(nextValue);\n        const hasChanged = String(nextValues) !== String(prevValues);\n        if (hasChanged && commit) onValueCommit(nextValues);\n        return hasChanged ? nextValues : prevValues;\n      } else {\n        return prevValues;\n      }\n    });\n  }\n  return /* @__PURE__ */jsx(SliderProvider, {\n    scope: props.__scopeSlider,\n    name,\n    disabled,\n    min,\n    max,\n    valueIndexToChangeRef,\n    thumbs: thumbRefs.current,\n    values,\n    orientation,\n    children: /* @__PURE__ */jsx(Collection.Provider, {\n      scope: props.__scopeSlider,\n      children: /* @__PURE__ */jsx(Collection.Slot, {\n        scope: props.__scopeSlider,\n        children: /* @__PURE__ */jsx(SliderOrientation, {\n          \"aria-disabled\": disabled,\n          \"data-disabled\": disabled ? \"\" : void 0,\n          ...sliderProps,\n          ref: forwardedRef,\n          onPointerDown: composeEventHandlers(sliderProps.onPointerDown, () => {\n            if (!disabled) valuesBeforeSlideStartRef.current = values;\n          }),\n          min,\n          max,\n          inverted,\n          onSlideStart: disabled ? void 0 : handleSlideStart,\n          onSlideMove: disabled ? void 0 : handleSlideMove,\n          onSlideEnd: disabled ? void 0 : handleSlideEnd,\n          onHomeKeyDown: () => !disabled && updateValues(min, 0, {\n            commit: true\n          }),\n          onEndKeyDown: () => !disabled && updateValues(max, values.length - 1, {\n            commit: true\n          }),\n          onStepKeyDown: ({\n            event,\n            direction: stepDirection\n          }) => {\n            if (!disabled) {\n              const isPageKey = PAGE_KEYS.includes(event.key);\n              const isSkipKey = isPageKey || event.shiftKey && ARROW_KEYS.includes(event.key);\n              const multiplier = isSkipKey ? 10 : 1;\n              const atIndex = valueIndexToChangeRef.current;\n              const value2 = values[atIndex];\n              const stepInDirection = step * multiplier * stepDirection;\n              updateValues(value2 + stepInDirection, atIndex, {\n                commit: true\n              });\n            }\n          }\n        })\n      })\n    })\n  });\n});\nSlider.displayName = SLIDER_NAME;\nvar [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {\n  startEdge: \"left\",\n  endEdge: \"right\",\n  size: \"width\",\n  direction: 1\n});\nvar SliderHorizontal = React.forwardRef((props, forwardedRef) => {\n  const {\n    min,\n    max,\n    dir,\n    inverted,\n    onSlideStart,\n    onSlideMove,\n    onSlideEnd,\n    onStepKeyDown,\n    ...sliderProps\n  } = props;\n  const [slider, setSlider] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setSlider(node));\n  const rectRef = React.useRef();\n  const direction = useDirection(dir);\n  const isDirectionLTR = direction === \"ltr\";\n  const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;\n  function getValueFromPointer(pointerPosition) {\n    const rect = rectRef.current || slider.getBoundingClientRect();\n    const input = [0, rect.width];\n    const output = isSlidingFromLeft ? [min, max] : [max, min];\n    const value = linearScale(input, output);\n    rectRef.current = rect;\n    return value(pointerPosition - rect.left);\n  }\n  return /* @__PURE__ */jsx(SliderOrientationProvider, {\n    scope: props.__scopeSlider,\n    startEdge: isSlidingFromLeft ? \"left\" : \"right\",\n    endEdge: isSlidingFromLeft ? \"right\" : \"left\",\n    direction: isSlidingFromLeft ? 1 : -1,\n    size: \"width\",\n    children: /* @__PURE__ */jsx(SliderImpl, {\n      dir: direction,\n      \"data-orientation\": \"horizontal\",\n      ...sliderProps,\n      ref: composedRefs,\n      style: {\n        ...sliderProps.style,\n        [\"--radix-slider-thumb-transform\"]: \"translateX(-50%)\"\n      },\n      onSlideStart: event => {\n        const value = getValueFromPointer(event.clientX);\n        onSlideStart?.(value);\n      },\n      onSlideMove: event => {\n        const value = getValueFromPointer(event.clientX);\n        onSlideMove?.(value);\n      },\n      onSlideEnd: () => {\n        rectRef.current = void 0;\n        onSlideEnd?.();\n      },\n      onStepKeyDown: event => {\n        const slideDirection = isSlidingFromLeft ? \"from-left\" : \"from-right\";\n        const isBackKey = BACK_KEYS[slideDirection].includes(event.key);\n        onStepKeyDown?.({\n          event,\n          direction: isBackKey ? -1 : 1\n        });\n      }\n    })\n  });\n});\nvar SliderVertical = React.forwardRef((props, forwardedRef) => {\n  const {\n    min,\n    max,\n    inverted,\n    onSlideStart,\n    onSlideMove,\n    onSlideEnd,\n    onStepKeyDown,\n    ...sliderProps\n  } = props;\n  const sliderRef = React.useRef(null);\n  const ref = useComposedRefs(forwardedRef, sliderRef);\n  const rectRef = React.useRef();\n  const isSlidingFromBottom = !inverted;\n  function getValueFromPointer(pointerPosition) {\n    const rect = rectRef.current || sliderRef.current.getBoundingClientRect();\n    const input = [0, rect.height];\n    const output = isSlidingFromBottom ? [max, min] : [min, max];\n    const value = linearScale(input, output);\n    rectRef.current = rect;\n    return value(pointerPosition - rect.top);\n  }\n  return /* @__PURE__ */jsx(SliderOrientationProvider, {\n    scope: props.__scopeSlider,\n    startEdge: isSlidingFromBottom ? \"bottom\" : \"top\",\n    endEdge: isSlidingFromBottom ? \"top\" : \"bottom\",\n    size: \"height\",\n    direction: isSlidingFromBottom ? 1 : -1,\n    children: /* @__PURE__ */jsx(SliderImpl, {\n      \"data-orientation\": \"vertical\",\n      ...sliderProps,\n      ref,\n      style: {\n        ...sliderProps.style,\n        [\"--radix-slider-thumb-transform\"]: \"translateY(50%)\"\n      },\n      onSlideStart: event => {\n        const value = getValueFromPointer(event.clientY);\n        onSlideStart?.(value);\n      },\n      onSlideMove: event => {\n        const value = getValueFromPointer(event.clientY);\n        onSlideMove?.(value);\n      },\n      onSlideEnd: () => {\n        rectRef.current = void 0;\n        onSlideEnd?.();\n      },\n      onStepKeyDown: event => {\n        const slideDirection = isSlidingFromBottom ? \"from-bottom\" : \"from-top\";\n        const isBackKey = BACK_KEYS[slideDirection].includes(event.key);\n        onStepKeyDown?.({\n          event,\n          direction: isBackKey ? -1 : 1\n        });\n      }\n    })\n  });\n});\nvar SliderImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSlider,\n    onSlideStart,\n    onSlideMove,\n    onSlideEnd,\n    onHomeKeyDown,\n    onEndKeyDown,\n    onStepKeyDown,\n    ...sliderProps\n  } = props;\n  const context = useSliderContext(SLIDER_NAME, __scopeSlider);\n  return /* @__PURE__ */jsx(Primitive.span, {\n    ...sliderProps,\n    ref: forwardedRef,\n    onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n      if (event.key === \"Home\") {\n        onHomeKeyDown(event);\n        event.preventDefault();\n      } else if (event.key === \"End\") {\n        onEndKeyDown(event);\n        event.preventDefault();\n      } else if (PAGE_KEYS.concat(ARROW_KEYS).includes(event.key)) {\n        onStepKeyDown(event);\n        event.preventDefault();\n      }\n    }),\n    onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n      const target = event.target;\n      target.setPointerCapture(event.pointerId);\n      event.preventDefault();\n      if (context.thumbs.has(target)) {\n        target.focus();\n      } else {\n        onSlideStart(event);\n      }\n    }),\n    onPointerMove: composeEventHandlers(props.onPointerMove, event => {\n      const target = event.target;\n      if (target.hasPointerCapture(event.pointerId)) onSlideMove(event);\n    }),\n    onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n      const target = event.target;\n      if (target.hasPointerCapture(event.pointerId)) {\n        target.releasePointerCapture(event.pointerId);\n        onSlideEnd(event);\n      }\n    })\n  });\n});\nvar TRACK_NAME = \"SliderTrack\";\nvar SliderTrack = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSlider,\n    ...trackProps\n  } = props;\n  const context = useSliderContext(TRACK_NAME, __scopeSlider);\n  return /* @__PURE__ */jsx(Primitive.span, {\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    \"data-orientation\": context.orientation,\n    ...trackProps,\n    ref: forwardedRef\n  });\n});\nSliderTrack.displayName = TRACK_NAME;\nvar RANGE_NAME = \"SliderRange\";\nvar SliderRange = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSlider,\n    ...rangeProps\n  } = props;\n  const context = useSliderContext(RANGE_NAME, __scopeSlider);\n  const orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const valuesCount = context.values.length;\n  const percentages = context.values.map(value => convertValueToPercentage(value, context.min, context.max));\n  const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;\n  const offsetEnd = 100 - Math.max(...percentages);\n  return /* @__PURE__ */jsx(Primitive.span, {\n    \"data-orientation\": context.orientation,\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    ...rangeProps,\n    ref: composedRefs,\n    style: {\n      ...props.style,\n      [orientation.startEdge]: offsetStart + \"%\",\n      [orientation.endEdge]: offsetEnd + \"%\"\n    }\n  });\n});\nSliderRange.displayName = RANGE_NAME;\nvar THUMB_NAME = \"SliderThumb\";\nvar SliderThumb = React.forwardRef((props, forwardedRef) => {\n  const getItems = useCollection(props.__scopeSlider);\n  const [thumb, setThumb] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setThumb(node));\n  const index = React.useMemo(() => thumb ? getItems().findIndex(item => item.ref.current === thumb) : -1, [getItems, thumb]);\n  return /* @__PURE__ */jsx(SliderThumbImpl, {\n    ...props,\n    ref: composedRefs,\n    index\n  });\n});\nvar SliderThumbImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSlider,\n    index,\n    name,\n    ...thumbProps\n  } = props;\n  const context = useSliderContext(THUMB_NAME, __scopeSlider);\n  const orientation = useSliderOrientationContext(THUMB_NAME, __scopeSlider);\n  const [thumb, setThumb] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setThumb(node));\n  const isFormControl = thumb ? Boolean(thumb.closest(\"form\")) : true;\n  const size = useSize(thumb);\n  const value = context.values[index];\n  const percent = value === void 0 ? 0 : convertValueToPercentage(value, context.min, context.max);\n  const label = getLabel(index, context.values.length);\n  const orientationSize = size?.[orientation.size];\n  const thumbInBoundsOffset = orientationSize ? getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;\n  React.useEffect(() => {\n    if (thumb) {\n      context.thumbs.add(thumb);\n      return () => {\n        context.thumbs.delete(thumb);\n      };\n    }\n  }, [thumb, context.thumbs]);\n  return /* @__PURE__ */jsxs(\"span\", {\n    style: {\n      transform: \"var(--radix-slider-thumb-transform)\",\n      position: \"absolute\",\n      [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`\n    },\n    children: [/* @__PURE__ */jsx(Collection.ItemSlot, {\n      scope: props.__scopeSlider,\n      children: /* @__PURE__ */jsx(Primitive.span, {\n        role: \"slider\",\n        \"aria-label\": props[\"aria-label\"] || label,\n        \"aria-valuemin\": context.min,\n        \"aria-valuenow\": value,\n        \"aria-valuemax\": context.max,\n        \"aria-orientation\": context.orientation,\n        \"data-orientation\": context.orientation,\n        \"data-disabled\": context.disabled ? \"\" : void 0,\n        tabIndex: context.disabled ? void 0 : 0,\n        ...thumbProps,\n        ref: composedRefs,\n        style: value === void 0 ? {\n          display: \"none\"\n        } : props.style,\n        onFocus: composeEventHandlers(props.onFocus, () => {\n          context.valueIndexToChangeRef.current = index;\n        })\n      })\n    }), isFormControl && /* @__PURE__ */jsx(BubbleInput, {\n      name: name ?? (context.name ? context.name + (context.values.length > 1 ? \"[]\" : \"\") : void 0),\n      value\n    }, index)]\n  });\n});\nSliderThumb.displayName = THUMB_NAME;\nvar BubbleInput = props => {\n  const {\n    value,\n    ...inputProps\n  } = props;\n  const ref = React.useRef(null);\n  const prevValue = usePrevious(value);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"value\");\n    const setValue = descriptor.set;\n    if (prevValue !== value && setValue) {\n      const event = new Event(\"input\", {\n        bubbles: true\n      });\n      setValue.call(input, value);\n      input.dispatchEvent(event);\n    }\n  }, [prevValue, value]);\n  return /* @__PURE__ */jsx(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    ...inputProps,\n    ref,\n    defaultValue: value\n  });\n};\nfunction getNextSortedValues(prevValues = [], nextValue, atIndex) {\n  const nextValues = [...prevValues];\n  nextValues[atIndex] = nextValue;\n  return nextValues.sort((a, b) => a - b);\n}\nfunction convertValueToPercentage(value, min, max) {\n  const maxSteps = max - min;\n  const percentPerStep = 100 / maxSteps;\n  const percentage = percentPerStep * (value - min);\n  return clamp(percentage, [0, 100]);\n}\nfunction getLabel(index, totalValues) {\n  if (totalValues > 2) {\n    return `Value ${index + 1} of ${totalValues}`;\n  } else if (totalValues === 2) {\n    return [\"Minimum\", \"Maximum\"][index];\n  } else {\n    return void 0;\n  }\n}\nfunction getClosestValueIndex(values, nextValue) {\n  if (values.length === 1) return 0;\n  const distances = values.map(value => Math.abs(value - nextValue));\n  const closestDistance = Math.min(...distances);\n  return distances.indexOf(closestDistance);\n}\nfunction getThumbInBoundsOffset(width, left, direction) {\n  const halfWidth = width / 2;\n  const halfPercent = 50;\n  const offset = linearScale([0, halfPercent], [0, halfWidth]);\n  return (halfWidth - offset(left) * direction) * direction;\n}\nfunction getStepsBetweenValues(values) {\n  return values.slice(0, -1).map((value, index) => values[index + 1] - value);\n}\nfunction hasMinStepsBetweenValues(values, minStepsBetweenValues) {\n  if (minStepsBetweenValues > 0) {\n    const stepsBetweenValues = getStepsBetweenValues(values);\n    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);\n    return actualMinStepsBetweenValues >= minStepsBetweenValues;\n  }\n  return true;\n}\nfunction linearScale(input, output) {\n  return value => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\nfunction getDecimalCount(value) {\n  return (String(value).split(\".\")[1] || \"\").length;\n}\nfunction roundValue(value, decimalCount) {\n  const rounder = Math.pow(10, decimalCount);\n  return Math.round(value * rounder) / rounder;\n}\nvar Root = Slider;\nvar Track = SliderTrack;\nvar Range = SliderRange;\nvar Thumb = SliderThumb;\nexport { Range, Root, Slider, SliderRange, SliderThumb, SliderTrack, Thumb, Track, createSliderScope };","map":{"version":3,"names":["React","clamp","composeEventHandlers","useComposedRefs","createContextScope","useControllableState","useDirection","usePrevious","useSize","Primitive","createCollection","jsx","jsxs","PAGE_KEYS","ARROW_KEYS","BACK_KEYS","SLIDER_NAME","Collection","useCollection","createCollectionScope","createSliderContext","createSliderScope","SliderProvider","useSliderContext","Slider","forwardRef","props","forwardedRef","name","min","max","step","orientation","disabled","minStepsBetweenThumbs","defaultValue","value","onValueChange","onValueCommit","inverted","sliderProps","thumbRefs","useRef","Set","valueIndexToChangeRef","isHorizontal","SliderOrientation","SliderHorizontal","SliderVertical","values","setValues","prop","defaultProp","onChange","value2","thumbs","current","focus","valuesBeforeSlideStartRef","handleSlideStart","closestIndex","getClosestValueIndex","updateValues","handleSlideMove","handleSlideEnd","prevValue","nextValue","hasChanged","atIndex","commit","decimalCount","getDecimalCount","snapToStep","roundValue","Math","round","prevValues","nextValues","getNextSortedValues","hasMinStepsBetweenValues","indexOf","String","scope","__scopeSlider","children","Provider","Slot","ref","onPointerDown","onSlideStart","onSlideMove","onSlideEnd","onHomeKeyDown","onEndKeyDown","length","onStepKeyDown","event","direction","stepDirection","isPageKey","includes","key","isSkipKey","shiftKey","multiplier","stepInDirection","displayName","SliderOrientationProvider","useSliderOrientationContext","startEdge","endEdge","size","dir","slider","setSlider","useState","composedRefs","node","rectRef","isDirectionLTR","isSlidingFromLeft","getValueFromPointer","pointerPosition","rect","getBoundingClientRect","input","width","output","linearScale","left","SliderImpl","style","clientX","slideDirection","isBackKey","sliderRef","isSlidingFromBottom","height","top","clientY","context","span","onKeyDown","preventDefault","concat","target","setPointerCapture","pointerId","has","onPointerMove","hasPointerCapture","onPointerUp","releasePointerCapture","TRACK_NAME","SliderTrack","trackProps","RANGE_NAME","SliderRange","rangeProps","valuesCount","percentages","map","convertValueToPercentage","offsetStart","offsetEnd","THUMB_NAME","SliderThumb","getItems","thumb","setThumb","index","useMemo","findIndex","item","SliderThumbImpl","thumbProps","isFormControl","Boolean","closest","percent","label","getLabel","orientationSize","thumbInBoundsOffset","getThumbInBoundsOffset","useEffect","add","delete","transform","position","ItemSlot","role","tabIndex","display","onFocus","BubbleInput","inputProps","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","setValue","set","Event","bubbles","call","dispatchEvent","sort","a","b","maxSteps","percentPerStep","percentage","totalValues","distances","abs","closestDistance","halfWidth","halfPercent","offset","getStepsBetweenValues","slice","minStepsBetweenValues","stepsBetweenValues","actualMinStepsBetweenValues","ratio","split","rounder","pow","Root","Track","Range","Thumb"],"sources":["/Users/nikola/Downloads/grass/grongardapp/node_modules/@radix-ui/react-slider/src/Slider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { createCollection } from '@radix-ui/react-collection';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst PAGE_KEYS = ['PageUp', 'PageDown'];\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\ntype SlideDirection = 'from-left' | 'from-right' | 'from-bottom' | 'from-top';\nconst BACK_KEYS: Record<SlideDirection, string[]> = {\n  'from-left': ['Home', 'PageDown', 'ArrowDown', 'ArrowLeft'],\n  'from-right': ['Home', 'PageDown', 'ArrowDown', 'ArrowRight'],\n  'from-bottom': ['Home', 'PageDown', 'ArrowDown', 'ArrowLeft'],\n  'from-top': ['Home', 'PageDown', 'ArrowUp', 'ArrowLeft'],\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Slider\n * -----------------------------------------------------------------------------------------------*/\n\nconst SLIDER_NAME = 'Slider';\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<SliderThumbElement>(SLIDER_NAME);\n\ntype ScopedProps<P> = P & { __scopeSlider?: Scope };\nconst [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME, [\n  createCollectionScope,\n]);\n\ntype SliderContextValue = {\n  name?: string;\n  disabled?: boolean;\n  min: number;\n  max: number;\n  values: number[];\n  valueIndexToChangeRef: React.MutableRefObject<number>;\n  thumbs: Set<SliderThumbElement>;\n  orientation: SliderProps['orientation'];\n};\n\nconst [SliderProvider, useSliderContext] = createSliderContext<SliderContextValue>(SLIDER_NAME);\n\ntype SliderElement = SliderHorizontalElement | SliderVerticalElement;\ninterface SliderProps\n  extends Omit<\n    SliderHorizontalProps | SliderVerticalProps,\n    keyof SliderOrientationPrivateProps | 'defaultValue'\n  > {\n  name?: string;\n  disabled?: boolean;\n  orientation?: React.AriaAttributes['aria-orientation'];\n  dir?: Direction;\n  min?: number;\n  max?: number;\n  step?: number;\n  minStepsBetweenThumbs?: number;\n  value?: number[];\n  defaultValue?: number[];\n  onValueChange?(value: number[]): void;\n  onValueCommit?(value: number[]): void;\n  inverted?: boolean;\n}\n\nconst Slider = React.forwardRef<SliderElement, SliderProps>(\n  (props: ScopedProps<SliderProps>, forwardedRef) => {\n    const {\n      name,\n      min = 0,\n      max = 100,\n      step = 1,\n      orientation = 'horizontal',\n      disabled = false,\n      minStepsBetweenThumbs = 0,\n      defaultValue = [min],\n      value,\n      onValueChange = () => {},\n      onValueCommit = () => {},\n      inverted = false,\n      ...sliderProps\n    } = props;\n    const thumbRefs = React.useRef<SliderContextValue['thumbs']>(new Set());\n    const valueIndexToChangeRef = React.useRef<number>(0);\n    const isHorizontal = orientation === 'horizontal';\n    const SliderOrientation = isHorizontal ? SliderHorizontal : SliderVertical;\n\n    const [values = [], setValues] = useControllableState({\n      prop: value,\n      defaultProp: defaultValue,\n      onChange: (value) => {\n        const thumbs = [...thumbRefs.current];\n        thumbs[valueIndexToChangeRef.current]?.focus();\n        onValueChange(value);\n      },\n    });\n    const valuesBeforeSlideStartRef = React.useRef(values);\n\n    function handleSlideStart(value: number) {\n      const closestIndex = getClosestValueIndex(values, value);\n      updateValues(value, closestIndex);\n    }\n\n    function handleSlideMove(value: number) {\n      updateValues(value, valueIndexToChangeRef.current);\n    }\n\n    function handleSlideEnd() {\n      const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];\n      const nextValue = values[valueIndexToChangeRef.current];\n      const hasChanged = nextValue !== prevValue;\n      if (hasChanged) onValueCommit(values);\n    }\n\n    function updateValues(value: number, atIndex: number, { commit } = { commit: false }) {\n      const decimalCount = getDecimalCount(step);\n      const snapToStep = roundValue(Math.round((value - min) / step) * step + min, decimalCount);\n      const nextValue = clamp(snapToStep, [min, max]);\n\n      setValues((prevValues = []) => {\n        const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);\n        if (hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {\n          valueIndexToChangeRef.current = nextValues.indexOf(nextValue);\n          const hasChanged = String(nextValues) !== String(prevValues);\n          if (hasChanged && commit) onValueCommit(nextValues);\n          return hasChanged ? nextValues : prevValues;\n        } else {\n          return prevValues;\n        }\n      });\n    }\n\n    return (\n      <SliderProvider\n        scope={props.__scopeSlider}\n        name={name}\n        disabled={disabled}\n        min={min}\n        max={max}\n        valueIndexToChangeRef={valueIndexToChangeRef}\n        thumbs={thumbRefs.current}\n        values={values}\n        orientation={orientation}\n      >\n        <Collection.Provider scope={props.__scopeSlider}>\n          <Collection.Slot scope={props.__scopeSlider}>\n            <SliderOrientation\n              aria-disabled={disabled}\n              data-disabled={disabled ? '' : undefined}\n              {...sliderProps}\n              ref={forwardedRef}\n              onPointerDown={composeEventHandlers(sliderProps.onPointerDown, () => {\n                if (!disabled) valuesBeforeSlideStartRef.current = values;\n              })}\n              min={min}\n              max={max}\n              inverted={inverted}\n              onSlideStart={disabled ? undefined : handleSlideStart}\n              onSlideMove={disabled ? undefined : handleSlideMove}\n              onSlideEnd={disabled ? undefined : handleSlideEnd}\n              onHomeKeyDown={() => !disabled && updateValues(min, 0, { commit: true })}\n              onEndKeyDown={() =>\n                !disabled && updateValues(max, values.length - 1, { commit: true })\n              }\n              onStepKeyDown={({ event, direction: stepDirection }) => {\n                if (!disabled) {\n                  const isPageKey = PAGE_KEYS.includes(event.key);\n                  const isSkipKey = isPageKey || (event.shiftKey && ARROW_KEYS.includes(event.key));\n                  const multiplier = isSkipKey ? 10 : 1;\n                  const atIndex = valueIndexToChangeRef.current;\n                  const value = values[atIndex];\n                  const stepInDirection = step * multiplier * stepDirection;\n                  updateValues(value + stepInDirection, atIndex, { commit: true });\n                }\n              }}\n            />\n          </Collection.Slot>\n        </Collection.Provider>\n      </SliderProvider>\n    );\n  }\n);\n\nSlider.displayName = SLIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SliderHorizontal\n * -----------------------------------------------------------------------------------------------*/\n\ntype Side = 'top' | 'right' | 'bottom' | 'left';\n\nconst [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext<{\n  startEdge: Side;\n  endEdge: Side;\n  size: keyof NonNullable<ReturnType<typeof useSize>>;\n  direction: number;\n}>(SLIDER_NAME, {\n  startEdge: 'left',\n  endEdge: 'right',\n  size: 'width',\n  direction: 1,\n});\n\ntype SliderOrientationPrivateProps = {\n  min: number;\n  max: number;\n  inverted: boolean;\n  onSlideStart?(value: number): void;\n  onSlideMove?(value: number): void;\n  onSlideEnd?(): void;\n  onHomeKeyDown(event: React.KeyboardEvent): void;\n  onEndKeyDown(event: React.KeyboardEvent): void;\n  onStepKeyDown(step: { event: React.KeyboardEvent; direction: number }): void;\n};\ninterface SliderOrientationProps\n  extends Omit<SliderImplProps, keyof SliderImplPrivateProps>,\n    SliderOrientationPrivateProps {}\n\ntype SliderHorizontalElement = SliderImplElement;\ninterface SliderHorizontalProps extends SliderOrientationProps {\n  dir?: Direction;\n}\n\nconst SliderHorizontal = React.forwardRef<SliderHorizontalElement, SliderHorizontalProps>(\n  (props: ScopedProps<SliderHorizontalProps>, forwardedRef) => {\n    const {\n      min,\n      max,\n      dir,\n      inverted,\n      onSlideStart,\n      onSlideMove,\n      onSlideEnd,\n      onStepKeyDown,\n      ...sliderProps\n    } = props;\n    const [slider, setSlider] = React.useState<SliderImplElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setSlider(node));\n    const rectRef = React.useRef<ClientRect>();\n    const direction = useDirection(dir);\n    const isDirectionLTR = direction === 'ltr';\n    const isSlidingFromLeft = (isDirectionLTR && !inverted) || (!isDirectionLTR && inverted);\n\n    function getValueFromPointer(pointerPosition: number) {\n      const rect = rectRef.current || slider!.getBoundingClientRect();\n      const input: [number, number] = [0, rect.width];\n      const output: [number, number] = isSlidingFromLeft ? [min, max] : [max, min];\n      const value = linearScale(input, output);\n\n      rectRef.current = rect;\n      return value(pointerPosition - rect.left);\n    }\n\n    return (\n      <SliderOrientationProvider\n        scope={props.__scopeSlider}\n        startEdge={isSlidingFromLeft ? 'left' : 'right'}\n        endEdge={isSlidingFromLeft ? 'right' : 'left'}\n        direction={isSlidingFromLeft ? 1 : -1}\n        size=\"width\"\n      >\n        <SliderImpl\n          dir={direction}\n          data-orientation=\"horizontal\"\n          {...sliderProps}\n          ref={composedRefs}\n          style={{\n            ...sliderProps.style,\n            ['--radix-slider-thumb-transform' as any]: 'translateX(-50%)',\n          }}\n          onSlideStart={(event) => {\n            const value = getValueFromPointer(event.clientX);\n            onSlideStart?.(value);\n          }}\n          onSlideMove={(event) => {\n            const value = getValueFromPointer(event.clientX);\n            onSlideMove?.(value);\n          }}\n          onSlideEnd={() => {\n            rectRef.current = undefined;\n            onSlideEnd?.();\n          }}\n          onStepKeyDown={(event) => {\n            const slideDirection = isSlidingFromLeft ? 'from-left' : 'from-right';\n            const isBackKey = BACK_KEYS[slideDirection].includes(event.key);\n            onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });\n          }}\n        />\n      </SliderOrientationProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * SliderVertical\n * -----------------------------------------------------------------------------------------------*/\n\ntype SliderVerticalElement = SliderImplElement;\ninterface SliderVerticalProps extends SliderOrientationProps {}\n\nconst SliderVertical = React.forwardRef<SliderVerticalElement, SliderVerticalProps>(\n  (props: ScopedProps<SliderVerticalProps>, forwardedRef) => {\n    const {\n      min,\n      max,\n      inverted,\n      onSlideStart,\n      onSlideMove,\n      onSlideEnd,\n      onStepKeyDown,\n      ...sliderProps\n    } = props;\n    const sliderRef = React.useRef<SliderImplElement>(null);\n    const ref = useComposedRefs(forwardedRef, sliderRef);\n    const rectRef = React.useRef<ClientRect>();\n    const isSlidingFromBottom = !inverted;\n\n    function getValueFromPointer(pointerPosition: number) {\n      const rect = rectRef.current || sliderRef.current!.getBoundingClientRect();\n      const input: [number, number] = [0, rect.height];\n      const output: [number, number] = isSlidingFromBottom ? [max, min] : [min, max];\n      const value = linearScale(input, output);\n\n      rectRef.current = rect;\n      return value(pointerPosition - rect.top);\n    }\n\n    return (\n      <SliderOrientationProvider\n        scope={props.__scopeSlider}\n        startEdge={isSlidingFromBottom ? 'bottom' : 'top'}\n        endEdge={isSlidingFromBottom ? 'top' : 'bottom'}\n        size=\"height\"\n        direction={isSlidingFromBottom ? 1 : -1}\n      >\n        <SliderImpl\n          data-orientation=\"vertical\"\n          {...sliderProps}\n          ref={ref}\n          style={{\n            ...sliderProps.style,\n            ['--radix-slider-thumb-transform' as any]: 'translateY(50%)',\n          }}\n          onSlideStart={(event) => {\n            const value = getValueFromPointer(event.clientY);\n            onSlideStart?.(value);\n          }}\n          onSlideMove={(event) => {\n            const value = getValueFromPointer(event.clientY);\n            onSlideMove?.(value);\n          }}\n          onSlideEnd={() => {\n            rectRef.current = undefined;\n            onSlideEnd?.();\n          }}\n          onStepKeyDown={(event) => {\n            const slideDirection = isSlidingFromBottom ? 'from-bottom' : 'from-top';\n            const isBackKey = BACK_KEYS[slideDirection].includes(event.key);\n            onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });\n          }}\n        />\n      </SliderOrientationProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * SliderImpl\n * -----------------------------------------------------------------------------------------------*/\n\ntype SliderImplElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ntype SliderImplPrivateProps = {\n  onSlideStart(event: React.PointerEvent): void;\n  onSlideMove(event: React.PointerEvent): void;\n  onSlideEnd(event: React.PointerEvent): void;\n  onHomeKeyDown(event: React.KeyboardEvent): void;\n  onEndKeyDown(event: React.KeyboardEvent): void;\n  onStepKeyDown(event: React.KeyboardEvent): void;\n};\ninterface SliderImplProps extends PrimitiveDivProps, SliderImplPrivateProps {}\n\nconst SliderImpl = React.forwardRef<SliderImplElement, SliderImplProps>(\n  (props: ScopedProps<SliderImplProps>, forwardedRef) => {\n    const {\n      __scopeSlider,\n      onSlideStart,\n      onSlideMove,\n      onSlideEnd,\n      onHomeKeyDown,\n      onEndKeyDown,\n      onStepKeyDown,\n      ...sliderProps\n    } = props;\n    const context = useSliderContext(SLIDER_NAME, __scopeSlider);\n\n    return (\n      <Primitive.span\n        {...sliderProps}\n        ref={forwardedRef}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          if (event.key === 'Home') {\n            onHomeKeyDown(event);\n            // Prevent scrolling to page start\n            event.preventDefault();\n          } else if (event.key === 'End') {\n            onEndKeyDown(event);\n            // Prevent scrolling to page end\n            event.preventDefault();\n          } else if (PAGE_KEYS.concat(ARROW_KEYS).includes(event.key)) {\n            onStepKeyDown(event);\n            // Prevent scrolling for directional key presses\n            event.preventDefault();\n          }\n        })}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const target = event.target as HTMLElement;\n          target.setPointerCapture(event.pointerId);\n          // Prevent browser focus behaviour because we focus a thumb manually when values change.\n          event.preventDefault();\n          // Touch devices have a delay before focusing so won't focus if touch immediately moves\n          // away from target (sliding). We want thumb to focus regardless.\n          if (context.thumbs.has(target)) {\n            target.focus();\n          } else {\n            onSlideStart(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, (event) => {\n          const target = event.target as HTMLElement;\n          if (target.hasPointerCapture(event.pointerId)) onSlideMove(event);\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const target = event.target as HTMLElement;\n          if (target.hasPointerCapture(event.pointerId)) {\n            target.releasePointerCapture(event.pointerId);\n            onSlideEnd(event);\n          }\n        })}\n      />\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * SliderTrack\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRACK_NAME = 'SliderTrack';\n\ntype SliderTrackElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SliderTrackProps extends PrimitiveSpanProps {}\n\nconst SliderTrack = React.forwardRef<SliderTrackElement, SliderTrackProps>(\n  (props: ScopedProps<SliderTrackProps>, forwardedRef) => {\n    const { __scopeSlider, ...trackProps } = props;\n    const context = useSliderContext(TRACK_NAME, __scopeSlider);\n    return (\n      <Primitive.span\n        data-disabled={context.disabled ? '' : undefined}\n        data-orientation={context.orientation}\n        {...trackProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nSliderTrack.displayName = TRACK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SliderRange\n * -----------------------------------------------------------------------------------------------*/\n\nconst RANGE_NAME = 'SliderRange';\n\ntype SliderRangeElement = React.ElementRef<typeof Primitive.span>;\ninterface SliderRangeProps extends PrimitiveSpanProps {}\n\nconst SliderRange = React.forwardRef<SliderRangeElement, SliderRangeProps>(\n  (props: ScopedProps<SliderRangeProps>, forwardedRef) => {\n    const { __scopeSlider, ...rangeProps } = props;\n    const context = useSliderContext(RANGE_NAME, __scopeSlider);\n    const orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider);\n    const ref = React.useRef<HTMLSpanElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const valuesCount = context.values.length;\n    const percentages = context.values.map((value) =>\n      convertValueToPercentage(value, context.min, context.max)\n    );\n    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;\n    const offsetEnd = 100 - Math.max(...percentages);\n\n    return (\n      <Primitive.span\n        data-orientation={context.orientation}\n        data-disabled={context.disabled ? '' : undefined}\n        {...rangeProps}\n        ref={composedRefs}\n        style={{\n          ...props.style,\n          [orientation.startEdge]: offsetStart + '%',\n          [orientation.endEdge]: offsetEnd + '%',\n        }}\n      />\n    );\n  }\n);\n\nSliderRange.displayName = RANGE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SliderThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'SliderThumb';\n\ntype SliderThumbElement = SliderThumbImplElement;\ninterface SliderThumbProps extends Omit<SliderThumbImplProps, 'index'> {}\n\nconst SliderThumb = React.forwardRef<SliderThumbElement, SliderThumbProps>(\n  (props: ScopedProps<SliderThumbProps>, forwardedRef) => {\n    const getItems = useCollection(props.__scopeSlider);\n    const [thumb, setThumb] = React.useState<SliderThumbImplElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));\n    const index = React.useMemo(\n      () => (thumb ? getItems().findIndex((item) => item.ref.current === thumb) : -1),\n      [getItems, thumb]\n    );\n    return <SliderThumbImpl {...props} ref={composedRefs} index={index} />;\n  }\n);\n\ntype SliderThumbImplElement = React.ElementRef<typeof Primitive.span>;\ninterface SliderThumbImplProps extends PrimitiveSpanProps {\n  index: number;\n  name?: string;\n}\n\nconst SliderThumbImpl = React.forwardRef<SliderThumbImplElement, SliderThumbImplProps>(\n  (props: ScopedProps<SliderThumbImplProps>, forwardedRef) => {\n    const { __scopeSlider, index, name, ...thumbProps } = props;\n    const context = useSliderContext(THUMB_NAME, __scopeSlider);\n    const orientation = useSliderOrientationContext(THUMB_NAME, __scopeSlider);\n    const [thumb, setThumb] = React.useState<HTMLSpanElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = thumb ? Boolean(thumb.closest('form')) : true;\n    const size = useSize(thumb);\n    // We cast because index could be `-1` which would return undefined\n    const value = context.values[index] as number | undefined;\n    const percent =\n      value === undefined ? 0 : convertValueToPercentage(value, context.min, context.max);\n    const label = getLabel(index, context.values.length);\n    const orientationSize = size?.[orientation.size];\n    const thumbInBoundsOffset = orientationSize\n      ? getThumbInBoundsOffset(orientationSize, percent, orientation.direction)\n      : 0;\n\n    React.useEffect(() => {\n      if (thumb) {\n        context.thumbs.add(thumb);\n        return () => {\n          context.thumbs.delete(thumb);\n        };\n      }\n    }, [thumb, context.thumbs]);\n\n    return (\n      <span\n        style={{\n          transform: 'var(--radix-slider-thumb-transform)',\n          position: 'absolute',\n          [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`,\n        }}\n      >\n        <Collection.ItemSlot scope={props.__scopeSlider}>\n          <Primitive.span\n            role=\"slider\"\n            aria-label={props['aria-label'] || label}\n            aria-valuemin={context.min}\n            aria-valuenow={value}\n            aria-valuemax={context.max}\n            aria-orientation={context.orientation}\n            data-orientation={context.orientation}\n            data-disabled={context.disabled ? '' : undefined}\n            tabIndex={context.disabled ? undefined : 0}\n            {...thumbProps}\n            ref={composedRefs}\n            /**\n             * There will be no value on initial render while we work out the index so we hide thumbs\n             * without a value, otherwise SSR will render them in the wrong position before they\n             * snap into the correct position during hydration which would be visually jarring for\n             * slower connections.\n             */\n            style={value === undefined ? { display: 'none' } : props.style}\n            onFocus={composeEventHandlers(props.onFocus, () => {\n              context.valueIndexToChangeRef.current = index;\n            })}\n          />\n        </Collection.ItemSlot>\n\n        {isFormControl && (\n          <BubbleInput\n            key={index}\n            name={\n              name ??\n              (context.name ? context.name + (context.values.length > 1 ? '[]' : '') : undefined)\n            }\n            value={value}\n          />\n        )}\n      </span>\n    );\n  }\n);\n\nSliderThumb.displayName = THUMB_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst BubbleInput = (props: React.ComponentPropsWithoutRef<'input'>) => {\n  const { value, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevValue = usePrevious(value);\n\n  // Bubble value change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'value') as PropertyDescriptor;\n    const setValue = descriptor.set;\n    if (prevValue !== value && setValue) {\n      const event = new Event('input', { bubbles: true });\n      setValue.call(input, value);\n      input.dispatchEvent(event);\n    }\n  }, [prevValue, value]);\n\n  /**\n   * We purposefully do not use `type=\"hidden\"` here otherwise forms that\n   * wrap it will not be able to access its value via the FormData API.\n   *\n   * We purposefully do not add the `value` attribute here to allow the value\n   * to be set programatically and bubble to any parent form `onChange` event.\n   * Adding the `value` will cause React to consider the programatic\n   * dispatch a duplicate and it will get swallowed.\n   */\n  return <input style={{ display: 'none' }} {...inputProps} ref={ref} defaultValue={value} />;\n};\n\nfunction getNextSortedValues(prevValues: number[] = [], nextValue: number, atIndex: number) {\n  const nextValues = [...prevValues];\n  nextValues[atIndex] = nextValue;\n  return nextValues.sort((a, b) => a - b);\n}\n\nfunction convertValueToPercentage(value: number, min: number, max: number) {\n  const maxSteps = max - min;\n  const percentPerStep = 100 / maxSteps;\n  const percentage = percentPerStep * (value - min);\n  return clamp(percentage, [0, 100]);\n}\n\n/**\n * Returns a label for each thumb when there are two or more thumbs\n */\nfunction getLabel(index: number, totalValues: number) {\n  if (totalValues > 2) {\n    return `Value ${index + 1} of ${totalValues}`;\n  } else if (totalValues === 2) {\n    return ['Minimum', 'Maximum'][index];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Given a `values` array and a `nextValue`, determine which value in\n * the array is closest to `nextValue` and return its index.\n *\n * @example\n * // returns 1\n * getClosestValueIndex([10, 30], 25);\n */\nfunction getClosestValueIndex(values: number[], nextValue: number) {\n  if (values.length === 1) return 0;\n  const distances = values.map((value) => Math.abs(value - nextValue));\n  const closestDistance = Math.min(...distances);\n  return distances.indexOf(closestDistance);\n}\n\n/**\n * Offsets the thumb centre point while sliding to ensure it remains\n * within the bounds of the slider when reaching the edges\n */\nfunction getThumbInBoundsOffset(width: number, left: number, direction: number) {\n  const halfWidth = width / 2;\n  const halfPercent = 50;\n  const offset = linearScale([0, halfPercent], [0, halfWidth]);\n  return (halfWidth - offset(left) * direction) * direction;\n}\n\n/**\n * Gets an array of steps between each value.\n *\n * @example\n * // returns [1, 9]\n * getStepsBetweenValues([10, 11, 20]);\n */\nfunction getStepsBetweenValues(values: number[]) {\n  return values.slice(0, -1).map((value, index) => values[index + 1] - value);\n}\n\n/**\n * Verifies the minimum steps between all values is greater than or equal\n * to the expected minimum steps.\n *\n * @example\n * // returns false\n * hasMinStepsBetweenValues([1,2,3], 2);\n *\n * @example\n * // returns true\n * hasMinStepsBetweenValues([1,2,3], 1);\n */\nfunction hasMinStepsBetweenValues(values: number[], minStepsBetweenValues: number) {\n  if (minStepsBetweenValues > 0) {\n    const stepsBetweenValues = getStepsBetweenValues(values);\n    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);\n    return actualMinStepsBetweenValues >= minStepsBetweenValues;\n  }\n  return true;\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction getDecimalCount(value: number) {\n  return (String(value).split('.')[1] || '').length;\n}\n\nfunction roundValue(value: number, decimalCount: number) {\n  const rounder = Math.pow(10, decimalCount);\n  return Math.round(value * rounder) / rounder;\n}\n\nconst Root = Slider;\nconst Track = SliderTrack;\nconst Range = SliderRange;\nconst Thumb = SliderThumb;\n\nexport {\n  createSliderScope,\n  //\n  Slider,\n  SliderTrack,\n  SliderRange,\n  SliderThumb,\n  //\n  Root,\n  Track,\n  Range,\n  Thumb,\n};\nexport type { SliderProps, SliderTrackProps, SliderRangeProps, SliderThumbProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}