{"ast":null,"code":"\"use client\";\n\n// packages/react/dialog/src/Dialog.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContext, createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { hideOthers } from \"aria-hidden\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\nvar Dialog = props => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const triggerRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(DialogProvider, {\n    scope: __scopeDialog,\n    triggerRef,\n    contentRef,\n    contentId: useId(),\n    titleId: useId(),\n    descriptionId: useId(),\n    open,\n    onOpenChange: setOpen,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    modal,\n    children\n  });\n};\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...triggerProps\n  } = props;\n  const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": context.open,\n    \"aria-controls\": context.contentId,\n    \"data-state\": getState(context.open),\n    ...triggerProps,\n    ref: composedTriggerRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  });\n});\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar DialogPortal = props => {\n  const {\n    __scopeDialog,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopeDialog,\n    forceMount,\n    children: React.Children.map(children, child => /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children: child\n      })\n    }))\n  });\n};\nDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n  return context.modal ? /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: /* @__PURE__ */jsx(DialogOverlayImpl, {\n      ...overlayProps,\n      ref: forwardedRef\n    })\n  }) : null;\n});\nDialogOverlay.displayName = OVERLAY_NAME;\nvar DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n  return (\n    // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n    // ie. when `Overlay` and `Content` are siblings\n    /* @__PURE__ */\n    jsx(RemoveScroll, {\n      as: Slot,\n      allowPinchZoom: true,\n      shards: [context.contentRef],\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        \"data-state\": getState(context.open),\n        ...overlayProps,\n        ref: forwardedRef,\n        style: {\n          pointerEvents: \"auto\",\n          ...overlayProps.style\n        }\n      })\n    })\n  );\n});\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: context.modal ? /* @__PURE__ */jsx(DialogContentModal, {\n      ...contentProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */jsx(DialogContentNonModal, {\n      ...contentProps,\n      ref: forwardedRef\n    })\n  });\n});\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n  return /* @__PURE__ */jsx(DialogContentImpl, {\n    ...props,\n    ref: composedRefs,\n    trapFocus: context.open,\n    disableOutsidePointerEvents: true,\n    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n      var _context$triggerRef$c;\n      event.preventDefault();\n      (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();\n    }),\n    onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, event => {\n      const originalEvent = event.detail.originalEvent;\n      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n      if (isRightClick) event.preventDefault();\n    }),\n    onFocusOutside: composeEventHandlers(props.onFocusOutside, event => event.preventDefault())\n  });\n});\nvar DialogContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const hasInteractedOutsideRef = React.useRef(false);\n  const hasPointerDownOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(DialogContentImpl, {\n    ...props,\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    onCloseAutoFocus: event => {\n      var _props$onCloseAutoFoc;\n      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);\n      if (!event.defaultPrevented) {\n        var _context$triggerRef$c2;\n        if (!hasInteractedOutsideRef.current) (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();\n        event.preventDefault();\n      }\n      hasInteractedOutsideRef.current = false;\n      hasPointerDownOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      var _props$onInteractOuts, _context$triggerRef$c3;\n      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);\n      if (!event.defaultPrevented) {\n        hasInteractedOutsideRef.current = true;\n        if (event.detail.originalEvent.type === \"pointerdown\") {\n          hasPointerDownOutsideRef.current = true;\n        }\n      }\n      const target = event.target;\n      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);\n      if (targetIsTrigger) event.preventDefault();\n      if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n        event.preventDefault();\n      }\n    }\n  });\n});\nvar DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    trapFocus,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  useFocusGuards();\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(FocusScope, {\n      asChild: true,\n      loop: true,\n      trapped: trapFocus,\n      onMountAutoFocus: onOpenAutoFocus,\n      onUnmountAutoFocus: onCloseAutoFocus,\n      children: /* @__PURE__ */jsx(DismissableLayer, {\n        role: \"dialog\",\n        id: context.contentId,\n        \"aria-describedby\": context.descriptionId,\n        \"aria-labelledby\": context.titleId,\n        \"data-state\": getState(context.open),\n        ...contentProps,\n        ref: composedRefs,\n        onDismiss: () => context.onOpenChange(false)\n      })\n    }), /* @__PURE__ */jsxs(Fragment, {\n      children: [/* @__PURE__ */jsx(TitleWarning, {\n        titleId: context.titleId\n      }), /* @__PURE__ */jsx(DescriptionWarning, {\n        contentRef,\n        descriptionId: context.descriptionId\n      })]\n    })]\n  });\n});\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...titleProps\n  } = props;\n  const context = useDialogContext(TITLE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.h2, {\n    id: context.titleId,\n    ...titleProps,\n    ref: forwardedRef\n  });\n});\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...descriptionProps\n  } = props;\n  const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.p, {\n    id: context.descriptionId,\n    ...descriptionProps,\n    ref: forwardedRef\n  });\n});\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...closeProps\n  } = props;\n  const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    ...closeProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n  });\n});\nDialogClose.displayName = CLOSE_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: \"dialog\"\n});\nvar TitleWarning = _ref => {\n  let {\n    titleId\n  } = _ref;\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n  const MESSAGE = \"`\".concat(titleWarningContext.contentName, \"` requires a `\").concat(titleWarningContext.titleName, \"` for the component to be accessible for screen reader users.\\n\\nIf you want to hide the `\").concat(titleWarningContext.titleName, \"`, you can wrap it with our VisuallyHidden component.\\n\\nFor more information, see https://radix-ui.com/primitives/docs/components/\").concat(titleWarningContext.docsSlug);\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n  return null;\n};\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\nvar DescriptionWarning = _ref2 => {\n  let {\n    contentRef,\n    descriptionId\n  } = _ref2;\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = \"Warning: Missing `Description` or `aria-describedby={undefined}` for {\".concat(descriptionWarningContext.contentName, \"}.\");\n  React.useEffect(() => {\n    var _contentRef$current;\n    const describedById = (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.getAttribute(\"aria-describedby\");\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n  return null;\n};\nvar Root = Dialog;\nvar Trigger = DialogTrigger;\nvar Portal = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;\nexport { Close, Content, Description, Dialog, DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogTitle, DialogTrigger, Overlay, Portal, Root, Title, Trigger, WarningProvider, createDialogScope };","map":{"version":3,"names":["React","composeEventHandlers","useComposedRefs","createContext","createContextScope","useId","useControllableState","DismissableLayer","FocusScope","Portal","PortalPrimitive","Presence","Primitive","useFocusGuards","RemoveScroll","hideOthers","Slot","Fragment","jsx","jsxs","DIALOG_NAME","createDialogContext","createDialogScope","DialogProvider","useDialogContext","Dialog","props","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","triggerRef","useRef","contentRef","setOpen","prop","defaultProp","onChange","scope","contentId","titleId","descriptionId","onOpenToggle","useCallback","prevOpen","displayName","TRIGGER_NAME","DialogTrigger","forwardRef","forwardedRef","triggerProps","context","composedTriggerRef","button","type","getState","ref","onClick","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","DialogPortal","container","Children","map","child","present","asChild","OVERLAY_NAME","DialogOverlay","portalContext","overlayProps","DialogOverlayImpl","as","allowPinchZoom","shards","div","style","pointerEvents","CONTENT_NAME","DialogContent","contentProps","DialogContentModal","DialogContentNonModal","composedRefs","useEffect","content","current","DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","_context$triggerRef$c","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","_props$onCloseAutoFoc","call","defaultPrevented","_context$triggerRef$c2","onInteractOutside","_props$onInteractOuts","_context$triggerRef$c3","target","targetIsTrigger","contains","onOpenAutoFocus","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","role","id","onDismiss","TitleWarning","DescriptionWarning","TITLE_NAME","DialogTitle","titleProps","h2","DESCRIPTION_NAME","DialogDescription","descriptionProps","p","CLOSE_NAME","DialogClose","closeProps","TITLE_WARNING_NAME","WarningProvider","useWarningContext","contentName","titleName","docsSlug","_ref","titleWarningContext","MESSAGE","concat","hasTitle","document","getElementById","console","error","DESCRIPTION_WARNING_NAME","_ref2","descriptionWarningContext","_contentRef$current","describedById","getAttribute","hasDescription","warn","Root","Trigger","Overlay","Content","Title","Description","Close"],"sources":["/Users/nikola/Downloads/grass/grongardapp/node_modules/@radix-ui/react-dialog/src/Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentRef: React.RefObject<DialogContentElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = React.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = React.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}